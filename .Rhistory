library(tidyverse)
file_df <- read_csv("file_df.csv")
file_df
file_df$new_name[1]
substr(file_df$new_name[1], 5, 10)
substr(file_df$new_name[1], 7, 10)
substr(file_df$new_name[1], 7, 9)
substr(file_df$new_name[1], 7, 8)
file_df$ws <- substr(file_df$new_name[1], 7, 8)
substr(file_df$new_name[1], 7, 8)
substr(file_df$new_name[1], 9, 15)
substr(file_df$new_name[1], 10, 18)
substr(file_df$new_name[1], 10, 17)
library(lubridate)
date(substr(file_df$new_name[1], 10, 17))
View(file_df)
date(substr(file_df$new_name[1], 10, 17), format = "yyyymmdd")
as.Date(substr(file_df$new_name[1], 10, 17), format = "yyyymmdd")
substr(file_df$new_name[1], 10, 17)
as.Date(substr(file_df$new_name[1], 10, 17), format = "%Y%m%d")
file_df$date <- as.Date(substr(file_df$new_name, 10, 17), format = "%Y%m%d") #create date column
<- as.Date(substr(file_df$new_name, 10, 17), format = "%Y%m%d") #create date column
file_df$date
file_df$ws
data = file_df %>% filter(year(date) == 2019)
file_df$value <- as.numeric(substr(file_df$new_name, 8, 8))
file_df$value
ggplot(data = file_df %>% filter(year(date) == 2019)) + geom_point(aes(x = date, y = value))
ggplot(data = file_df %>% filter(year(date) == 2020)) + geom_point(aes(x = date, y = value))
ggplot(data = file_df %>% filter(year(date) == 2020)) + geom_point(aes(x = date, y = value)) + facet_grid(~year(date))
ggplot(data = file_df) + geom_point(aes(x = date, y = value)) + facet_grid(~year(date))
ggplot(data = file_df) + geom_point(aes(x = date, y = value)) + facet_wrap(~year(date))
ggplot(data = file_df %>% filter(year(date) %in% 2019:2021)) + geom_point(aes(x = date, y = value)) + facet_wrap(~year(date))
ggplot(data = file_df %>% filter(year(date) %in% 2021)) + geom_point(aes(x = date, y = value)) + facet_wrap(~year(date))
ggplot(data = file_df %>% filter(year(date) %in% 2019)) + geom_point(aes(x = date, y = value))
ggplot(data = file_df %>% filter(year(date) %in% 2020)) + geom_point(aes(x = date, y = value))
ggplot(data = file_df %>% filter(year(date) %in% 2021)) + geom_point(aes(x = date, y = value))
ggplot(data = file_df %>% filter(year(date) %in% 2021)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(breaks = 10)
ggplot(data = file_df %>% filter(year(date) %in% 2021)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(breaks = 10)
ggplot(data = file_df %>% filter(year(date) %in% 2021)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(n.breaks = 10)
p2019 <- ggplot(data = file_df %>% filter(year(date) %in% 2019)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(n.breaks = 10)
p2020 <- ggplot(data = file_df %>% filter(year(date) %in% 2020)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(n.breaks = 10)
p2021 <- ggplot(data = file_df %>% filter(year(date) %in% 2021)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(n.breaks = 10)
library(plotly)
ggplotly(p2019)
p2019 <- ggplot(data = file_df %>% filter(year(date) %in% 2019)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(n.breaks = 10, limits = c(0,9))
ggplotly(p2019)
p2019 <- ggplot(data = file_df %>% filter(year(date) %in% 2019)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(n.breaks = 9, limits = c(0,9))
p2020 <- ggplot(data = file_df %>% filter(year(date) %in% 2020)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(n.breaks = 9, limits = c(0,9))
p2021 <- ggplot(data = file_df %>% filter(year(date) %in% 2021)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(n.breaks = 9, limits = c(0,9))
ggplotly(p2019)
p2019 <- ggplot(data = file_df %>% filter(year(date) %in% 2019)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(n.breaks = 9, limits = c(0,9))
ggplotly(p2019)
p2019 <- ggplot(data = file_df %>% filter(year(date) %in% 2019)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(n.breaks = 9, limits = c(1,9))
p2020 <- ggplot(data = file_df %>% filter(year(date) %in% 2020)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(n.breaks = 9, limits = c(1,9))
p2021 <- ggplot(data = file_df %>% filter(year(date) %in% 2021)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(n.breaks = 9, limits = c(1,9))
ggplotly(p2019)
p2020 <- ggplot(data = file_df %>% filter(year(date) %in% 2020)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(n.breaks = 9, limits = c(1,9))
p2021 <- ggplot(data = file_df %>% filter(year(date) %in% 2021)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(n.breaks = 9, limits = c(1,9))
ggplotly(p2019)
ggplotly(p2020)
ggplotly(p2021)
p2019 <- ggplot(data = file_df %>% filter(year(date) %in% 2019)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(n.breaks = 9, limits = c(1,9))
p2020 <- ggplot(data = file_df %>% filter(year(date) %in% 2020)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(n.breaks = 9, limits = c(1,9))
p2021 <- ggplot(data = file_df %>% filter(year(date) %in% 2021)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(n.breaks = 9, limits = c(1,9))
ggplotly(p2019)
ggplotly(p2020)
ggplotly(p2021)
ggplotly(p2020)
library(tidyverse)
library(lubridate)
library(plotly)
file_df <- read_csv("file_df.csv")
file_df$ws <- substr(file_df$new_name, 7, 8) #create watershed column
file_df$date <- as.Date(substr(file_df$new_name, 10, 17), format = "%Y%m%d") #create date column
file_df$value <- as.numeric(substr(file_df$new_name, 8, 8))
p2019 <- ggplot(data = file_df %>% filter(year(date) %in% 2019)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(n.breaks = 9, limits = c(1,9))
p2020 <- ggplot(data = file_df %>% filter(year(date) %in% 2020)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(n.breaks = 9, limits = c(1,9))
p2021 <- ggplot(data = file_df %>% filter(year(date) %in% 2021)) + geom_point(aes(x = date, y = value)) + scale_y_continuous(n.breaks = 9, limits = c(1,9))
ggplotly(p2019)
COPYofData <- "F:/hbef_fcam_images/COPY of data for script"
list.dirs(path = COPYofData)
list.dirs(path = COPYofData, recursive = T)
list.files(path = COPYofData, recursive = T)
COPYofData_file <- data.frame(fname = list.files(path = COPYofData, recursive = T))
grepl("jpg", COPYofData_file$fname[12], ignore.case = T)
library(tidyverse)
library(lubridate)
COPYofData_file <- data.frame(fname = list.files(path = COPYofData, recursive = T)) %>%
mutate(ifelse(grepl(".jpg", fname, ignore.case = T), "unlabeled photo", NA))
View(COPYofData_file)
View(COPYofData_file)
COPYofData_file <- data.frame(fname = list.files(path = COPYofData, recursive = T)) %>%
mutate(photo_type = ifelse(grepl(".jpg", fname, ignore.case = T), "unlabeled photo", NA))
ImMethods <- "F:/hbef_fcam_images/Image Methods"
list.dirs(ImMethods)
ImMethods <- "F:/hbef_fcam_images/Image_Methods"
list.dirs(ImMethods)
ImMethods_file <- data.frame(fname = list.files(path = ImMethods, recursive = T)) %>%
mutate(photo_type = ifelse(grepl(".jpg", fname, ignore.case = T), "unlabeled photo", NA))
View(ImMethods_file)
ImMethods_file <- data.frame(fname = list.files(path = ImMethods, recursive = T)) %>%
mutate(photo_type = ifelse(grepl(".jpg", fname, ignore.case = T), "unlabeled photo", NA)) %>%
mutate(photo_type = ifelse(grepl("hbwtr", fname, ignore.case = T), "labeled photo", photo_type))
View(ImMethods_file)
sub('.*hbwtr', '', ImMethods_file$fname[10])
sub('.*hbwtr_', '', ImMethods_file$fname[10])
sub('.*/hbwtr_', '', ImMethods_file$fname[10])
ImMethods_file$fname[10]
sub('.*/hbwtr_', '', ImMethods_file$fname[10])
sub('.*hbwtr', '', ImMethods_file$fname[10], ignore.case = T)
sub('.*hbwtr_', '', ImMethods_file$fname[10], ignore.case = T)
ImMethods_file <- data.frame(fname = list.files(path = ImMethods, recursive = T)) %>%
mutate(photo_type = ifelse(grepl(".jpg", fname, ignore.case = T), "unlabeled photo", NA)) %>%
mutate(photo_type = ifelse(grepl("hbwtr", fname, ignore.case = T), "labeled photo", photo_type)) %>%
mutate(imgcode = sub('.*hbwtr_', '', fname, ignore.case = T)) %>%
mutate(ws = substr(imgcode, 1,2),
date = ymd(substr(imgcode, 4,11)))
View(ImMethods_file)
ImMethods_file <- data.frame(fname = list.files(path = ImMethods, recursive = T)) %>%
mutate(photo_type = ifelse(grepl(".jpg", fname, ignore.case = T), "unlabeled photo", NA)) %>%
mutate(photo_type = ifelse(grepl("hbwtr", fname, ignore.case = T), "labeled photo", photo_type)) %>%
mutate(imgcode = ifelse(photo_type == "labeled photo", sub('.*hbwtr_', '', fname, ignore.case = T), NA)) %>%
mutate(ws = substr(imgcode, 1,2),
date = ymd(substr(imgcode, 4,11)))
View(COPYofData_file)
View(ImMethods_file)
projdir <- "F:/hbef_fcam_images/project_dir"
list.dirs(projdir)
projdir_file <- data.frame(fname = list.files(path = projdir, recursive = T)) %>%
mutate(photo_type = ifelse(grepl(".jpg", fname, ignore.case = T), "unlabeled photo", NA)) %>%
mutate(photo_type = ifelse(grepl("hbwtr", fname, ignore.case = T), "labeled photo", photo_type)) %>%
mutate(imgcode = ifelse(photo_type == "labeled photo", sub('.*hbwtr_', '', fname, ignore.case = T), NA)) %>%
mutate(ws = substr(imgcode, 1,2),
date = ymd(substr(imgcode, 4,11)))
View(projdir_file)
StreamPhotos <- "F:/hbef_fcam_images/Stream Photos"
list.dirs(StreamPhotos)
StreamPhotos_file <- data.frame(fname = list.files(path = StreamPhotos, recursive = T)) %>%
mutate(photo_type = ifelse(grepl(".jpg", fname, ignore.case = T), "unlabeled photo", NA)) %>%
mutate(photo_type = ifelse(grepl("hbwtr", fname, ignore.case = T), "labeled photo", photo_type)) %>%
mutate(imgcode = ifelse(photo_type == "labeled photo", sub('.*hbwtr_', '', fname, ignore.case = T), NA)) %>%
mutate(ws = substr(imgcode, 1,2),
date = ymd(substr(imgcode, 4,11)))
View(StreamPhotos_file)
library(glue)
read_csv(glue(projdir, "labeled_image_files/file_df.csv"))
read_csv(glue(projdir, "/labeled_image_files/file_df.csv"))
file_df <- read_csv(glue(projdir, "/labeled_image_files/file_df.csv"))
View(file_df)
View(file_df)
View(projdir_file)
full_join(file_df, projdir_file, by = c("new_name" = "imgcode"))
# step 1a - are all the labeled photos in file_df.csv?
projdir_file$imgcode
full_join(file_df %>% mutate(imgcode = sub('.*hbwtr_', '', new_name, ignore.case = T)), projdir_file, by = "imgcode")
step1a <- full_join(file_df %>% mutate(imgcode = sub('.*hbwtr_', '', new_name, ignore.case = T)), projdir_file, by = "imgcode")
View(step1a)
library(tidyverse)
library(lubridate)
library(plotly)
library(glue)
library(data.table)
library(glue)
library("exiftoolr")
file_names <- list.files(projdir, recursive = T, pattern = "*.jpg", ignore.case = T, full.names = T)[c(1000:1010)]
exif_read(file_names[1])
file.exists(file_names[1])
create_dates <- function(x) {
created = ifelse(file.exists(x), exif_read(x)$CreateDate, NA)
df = data.frame(fname = x, created = created)
return(df)
}
creation_dates <- list.files(projdir, recursive = T, pattern = "*.jpg", ignore.case = T, full.names = T)[c(1:10)] %>%
lapply(create_dates) %>%
rbindlist()
View(creation_dates)
df = data.frame(fname = x, created_dttm = created)
create_dates <- function(x) {
created = ifelse(file.exists(x), ymd_hms(exif_read(x)$CreateDate, NA))
df = data.frame(fname = x, created_dttm = created)
return(df)
}
creation_dates <- list.files(projdir, recursive = T, pattern = "*.jpg", ignore.case = T, full.names = T)[c(1:10)] %>%
lapply(create_dates) %>%
rbindlist()
View(creation_dates)
created = ifelse(file.exists(x), exif_read(x)$CreateDate, NA)
create_dates <- function(x) {
created = ifelse(file.exists(x), exif_read(x)$CreateDate, NA)
df = data.frame(fname = x, created_dttm = created)
return(df)
}
creation_dates <- list.files(projdir, recursive = T, pattern = "*.jpg", ignore.case = T, full.names = T)[c(1:10)] %>%
lapply(create_dates) %>%
rbindlist()
View(creation_dates)
creation_dates <- list.files(projdir, recursive = T, pattern = "*.jpg", ignore.case = T, full.names = T) %>%
lapply(create_dates) %>%
rbindlist()
create_dates <- function(x) {
if(file.exists(x)){
#created = exif_read(x)$CreateDate
df = data.frame(fname = x, created_dttm = "created")
}else{
df = data.frame(fname = x, created_dttm = NA)
}
return(df)
}
creation_dates <- list.files(projdir, recursive = T, pattern = "*.jpg", ignore.case = T, full.names = T) %>%
lapply(create_dates)
creation_dates <- list.files(projdir, recursive = T, pattern = "*.jpg", ignore.case = T, full.names = T) %>%
lapply(create_dates) %>%
rbindlist()
summary(creation_dates)
!is.na(creation_dates$created_dttm)
which(!is.na(creation_dates$created_dttm))
which(is.na(creation_dates$created_dttm))
n <- length(list.files(projdir, recursive = T, pattern = "*.jpg", ignore.case = T, full.names = T))
files <- list.files(projdir, recursive = T, pattern = "*.jpg", ignore.case = T, full.names = T)
files[1]
for(i in 1:n){
print(exif_read(files[i])$FileCreateDate)
}
error_list <- list()
print(i)
for(i in 1:n){
error_list[[i]] <- exif_read(files[i])$FileCreateDate
print(i)
}
View(error_list)
for(i in 467:n){
error_list[[i]] <- exif_read(files[i])$CreateDate
print(i)
}
error_list <- list()
for(i in 467:n){
error_list[[i]] <- exif_read(files[i])$CreateDate
print(i)
}
for(i in 467:n){
error_list[[i]] <- exif_read(files[i])$CreateDate
print(i)
}
View(creation_dates)
View(error_list)
safe_create_dates <- function(filepath) {
tryCatch({
create_dates(filepath)  # Your original function
}, error = function(e) {
cat("Error processing file:", filepath, "\nError message:", e$message, "\n")
NULL  # Return NULL or some indication of failure that can be handled later
})
}
creation_dates <- list.files(projdir, recursive = TRUE, pattern = "*.jpg", ignore.case = TRUE, full.names = TRUE)[c(1700:1750)] %>%
lapply(safe_create_dates) %>%
rbindlist(fill = TRUE)
View(creation_dates)
create_dates <- function(x) {
if(file.exists(x)){
#created = exif_read(x)$CreateDate
df = data.frame(fname = x, created_dttm = exif_read(files[i])$CreateDate)
}else{
df = data.frame(fname = x, created_dttm = NA)
}
return(df)
}
safe_create_dates <- function(filepath) {
tryCatch({
create_dates(filepath)  # Your original function
}, error = function(e) {
cat("Error processing file:", filepath, "\nError message:", e$message, "\n")
NULL  # Return NULL or some indication of failure that can be handled later
})
}
creation_dates <- list.files(projdir, recursive = TRUE, pattern = "*.jpg", ignore.case = TRUE, full.names = TRUE)[c(1700:1750)] %>%
lapply(safe_create_dates) %>%
rbindlist(fill = TRUE)
View(creation_dates)
create_dates <- function(x) {
if(file.exists(x)){
#created = exif_read(x)$CreateDate
df = data.frame(fname = x, created_dttm = exif_read(files[x])$CreateDate)
}else{
df = data.frame(fname = x, created_dttm = NA)
}
return(df)
}
safe_create_dates <- function(filepath) {
tryCatch({
create_dates(filepath)  # Your original function
}, error = function(e) {
cat("Error processing file:", filepath, "\nError message:", e$message, "\n")
NULL  # Return NULL or some indication of failure that can be handled later
})
}
creation_dates <- list.files(projdir, recursive = TRUE, pattern = "*.jpg", ignore.case = TRUE, full.names = TRUE)[c(1700:1750)] %>%
lapply(safe_create_dates) %>%
rbindlist(fill = TRUE)
list.files(projdir, recursive = TRUE, pattern = "*.jpg", ignore.case = TRUE, full.names = TRUE)[c(1700:1750)]
safe_create_dates <- function(filepath) {
tryCatch({
create_dates(filepath)  # Your original function
}, error = function(e) {
cat("Error processing file:", substrRight(filepath, 24), "--Error message:", e$message, "\n")
NULL  # Return NULL or some indication of failure that can be handled later
})
}
create_dates <- function(x) {
created = exif_read(x)$CreateDate
df = df(fname = x, created_dttm = created)
return(df)
}
safe_create_dates <- function(filepath) {
tryCatch({
create_dates(filepath)  # Your original function
}, error = function(e) {
cat("Error processing file:", substrRight(filepath, 24), "--Error message:", e$message, "\n")
NULL  # Return NULL or some indication of failure that can be handled later
})
}
creation_dates <- list.files(projdir, recursive = TRUE, pattern = "*.jpg", ignore.case = TRUE, full.names = TRUE)[c(1700:1750)] %>%
lapply(safe_create_dates) %>%
rbindlist(fill = TRUE)
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
safe_create_dates <- function(filepath) {
tryCatch({
create_dates(filepath)  # Your original function
}, error = function(e) {
cat("Error processing file:", substrRight(filepath, 24), "--Error message:", e$message, "\n")
NULL  # Return NULL or some indication of failure that can be handled later
})
}
creation_dates <- list.files(projdir, recursive = TRUE, pattern = "*.jpg", ignore.case = TRUE, full.names = TRUE)[c(1700:1750)] %>%
lapply(safe_create_dates) %>%
rbindlist(fill = TRUE)
creation_dates <- list.files(projdir, recursive = T, pattern = "*.jpg", ignore.case = T, full.names = T)[c(1:10)] %>%
lapply(create_dates) %>%
rbindlist()
exif_read(file_names[1])
list.files(projdir, recursive = T, pattern = "*.jpg", ignore.case = T, full.names = T)[c(1:10)]
create_dates(list.files(projdir, recursive = TRUE, pattern = "*.jpg", ignore.case = TRUE, full.names = TRUE)[1])
list.files(projdir, recursive = TRUE, pattern = "*.jpg", ignore.case = TRUE, full.names = TRUE)[1]
file_names <- list.files(projdir, recursive = T, pattern = "*.jpg", ignore.case = T, full.names = T)
rm(file_names)
files <- list.files(projdir, recursive = T, pattern = "*.jpg", ignore.case = T, full.names = T)
exif_read(files[1])
exif_read(files[1])$Createdate
exif_read(files[1])$CreateDate
create_dates <- function(x) {
created = exif_read(x)$CreateDate
df = data.frame(fname = x, created_dttm = created)
return(df)
}
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
safe_create_dates <- function(filepath) {
tryCatch({
create_dates(filepath)  # Your original function
}, error = function(e) {
cat("Error processing file:", substrRight(filepath, 24), "--Error message:", e$message, "\n")
NULL  # Return NULL or some indication of failure that can be handled later
})
}
creation_dates <- list.files(projdir, recursive = TRUE, pattern = "*.jpg", ignore.case = TRUE, full.names = TRUE)[c(1700:1750)] %>%
lapply(safe_create_dates) %>%
rbindlist(fill = TRUE)
View(creation_dates)
# the new creation dates
creation_dates <- list.files(projdir, recursive = TRUE, pattern = "*.jpg", ignore.case = TRUE, full.names = TRUE) %>%
lapply(safe_create_dates) %>%
rbindlist(fill = TRUE)
View(creation_dates)
write_csv(creation_dates, "projdir_metadata_files.csv")
dmy_hms(creation_dates$created_dttm)
creation_dates$created_dttm
ymd_hms(creation_dates$created_dttm)
creation_dates$created_dttm <- ymd_hms(creation_dates$created_dttm)
write_csv(creation_dates, "projdir_metadata_files.csv")
creation_dates$written_dttm <- substrRight(creation_dates$fname, 13)
creation_dates$written_dttm
creation_dates$written_dttm <- substr(creation_dates$fname, nchar(creation_dates$fname)-17, nchar(creation_dates$fname)-3)
creation_dates$written_dttm
creation_dates$written_dttm <- substr(creation_dates$fname, nchar(creation_dates$fname)-16, nchar(creation_dates$fname)-4)
creation_dates$written_dttm
creation_dates$written_dttm <- substr(creation_dates$fname, nchar(creation_dates$fname)-15, nchar(creation_dates$fname)-4)
creation_dates$written_dttm
creation_dates$written_dttm <- substr(creation_dates$fname, nchar(creation_dates$fname)-20, nchar(creation_dates$fname)-4)
creation_dates$written_dttm
creation_dates$written_dttm <- substr(creation_dates$fname, nchar(creation_dates$fname)-18, nchar(creation_dates$fname)-4)
creation_dates$written_dttm
creation_dates$written_dttm <- ymd_hms(substr(creation_dates$fname, nchar(creation_dates$fname)-18, nchar(creation_dates$fname)-4))
creation_dates$written_dttm
creation_dates
ifelse(abs(difftime(creation_dates$created_dttm, creation_dates$written_dttm)) <=5, "same", "diff")
creation_dates$error <- ifelse(abs(difftime(creation_dates$created_dttm, creation_dates$written_dttm)) <=5, "same", "diff")
View(creation_dates)
creation_dates$error <- ifelse(abs(difftime(creation_dates$created_dttm, creation_dates$written_dttm), "mins") <=10, "same", "diff")
creation_dates$error <- ifelse(abs(difftime(creation_dates$created_dttm, creation_dates$written_dttm, "mins")) <=10, "same", "diff")
creation_dates
View(creation_dates)
creation_dates$error <- ifelse(abs(difftime(creation_dates$created_dttm, creation_dates$written_dttm, "mins")) <=10, "same", "diff")
creation_dates
View(creation_dates)
abs(difftime(creation_dates$created_dttm, creation_dates$written_dttm, "mins")
abs(difftime(creation_dates$created_dttm, creation_dates$written_dttm, "mins"))
abs(difftime(creation_dates$created_dttm, creation_dates$written_dttm, "mins"))
creation_dates$error <- ifelse(abs(difftime(creation_dates$created_dttm, creation_dates$written_dttm, units = "mins")) <=10, "same", "diff")
creation_dates
View(creation_dates)
labeled_data
full_dates <- data.frame(date = sort(rep(seq.Date(from = dmy("01-01-2018"), to = dmy("31-12-2023"), by = "1 day"),7)),
ws = rep(paste0("w",c(1:6,9)), length(seq.Date(from = dmy("01-01-2018"), to = dmy("31-12-2023"), by = "1 day"))))
labeled_data <- left_join(full_dates, step1a) %>%
group_by(ws, date) %>%
mutate(img_num = sum(!is.na(fname)))
labeled_data
labeled_data %>%
group_by(ws, year(date)) %>%
summarise(n = sum(fname),
n_actual = sum(!is.na(fname)),
percent_complete = n_actual/n)
labeled_data
View(labeled_data)
labeled_data %>%
group_by(ws, year(date)) %>%
summarise(n = sum(is.na(fname)),
n_actual = sum(!is.na(fname)),
percent_complete = n_actual/n+n_actual)
labeled_data %>%
group_by(ws, year(date)) %>%
summarise(n = sum(is.na(fname)),
n_actual = sum(!is.na(fname)),
percent_complete = n_actual/(n+n_actual))
labeled_data %>%
group_by(ws, year(date)) %>%
summarise(n = sum(is.na(fname)),
n_actual = sum(!is.na(fname)),
percent_complete = n_actual/(n+n_actual)*100)
per_complete <- labeled_data %>%
group_by(ws, year(date)) %>%
summarise(n = sum(is.na(fname)),
n_actual = sum(!is.na(fname)),
percent_complete = n_actual/(n+n_actual)*100)
View(per_complete)
View(per_complete)
ggplot() + geom_bar(aes(x = ws, y = percent_complete, color = `year(date)`), stat = "identity")
ggplot(data = per_complete) + geom_bar(aes(x = ws, y = percent_complete, color = `year(date)`), stat = "identity")
ggplot(data = per_complete) + geom_bar(aes(x = ws, y = percent_complete, color = `year(date)`), position = "identity", )
ggplot(data = per_complete) + geom_bar(aes(x = ws, y = percent_complete, color = `year(date)`), stat = "identity", position = "identity")
ggplot(data = per_complete) + geom_bar(aes(x = ws, y = percent_complete, color = `year(date)`), stat = "identity", position = "aside")
ggplot(data = per_complete) + geom_bar(aes(x = ws, y = percent_complete, color = `year(date)`), stat = "identity", position = "side")
ggplot(data = per_complete) + geom_bar(aes(x = ws, y = percent_complete, fill = `year(date)`), stat = "identity", position = "dodge")
ggplot(data = per_complete) + geom_bar(aes(x = ws, y = percent_complete, fill = factor(`year(date)`)), stat = "identity", position = "dodge")
ggplot(data = per_complete) + geom_bar(aes(x = ws, y = percent_complete, fill = factor(`year(date)`)), stat = "identity", position = "dodge") + theme_bw()
exif_read(files[1])
install.packages("doParallel")
library(doParallel)
View(creation_dates)
summary(creation_dates$error)
unique(creation_dates$error)
## fix impossible dates
creation_dates %>%
filter(is.na(error))
library(tidyverse)
library(lubridate)
library(plotly)
library(glue)
library(data.table)
library(glue)
library(doParallel)
## fix impossible dates
creation_dates %>%
filter(is.na(error))
## fix wrong dates
creation_dates %>%
filter(error == "diff")
file_df <- read_csv("file_df.csv") # I have a local copy of file_df.csv
# step 1a - are all the labeled photos in file_df.csv?
file_df$new_name <- ifelse(file_df$status == "renamed manually", paste0(file_df$new_name,".jpg"), file_df$new_name)
step1a <- full_join(file_df %>% mutate(imgcode = sub('.*hbwtr_', '', new_name, ignore.case = T)), projdir_file, by = "imgcode")
#visualize how many images have been successfully renamed:
head(step1a)
full_dates <- data.frame(date = sort(rep(seq.Date(from = dmy("01-01-2018"), to = dmy("31-12-2023"), by = "1 day"),7)),
ws = rep(paste0("w",c(1:6,9)), length(seq.Date(from = dmy("01-01-2018"), to = dmy("31-12-2023"), by = "1 day"))))
labeled_data <- left_join(full_dates, step1a) %>%
group_by(ws, date) %>%
mutate(img_num = sum(!is.na(fname)))
labeled_data
per_complete <- labeled_data %>%
group_by(ws, year(date)) %>%
summarise(n = sum(is.na(fname)),
n_actual = sum(!is.na(fname)),
percent_complete = n_actual/(n+n_actual)*100)
ggplot(data = per_complete) + geom_bar(aes(x = ws, y = percent_complete, fill = factor(`year(date)`)), stat = "identity", position = "dodge") + theme_bw()
p2019 <- ggplot(data = labeled_data %>% filter(year(date) %in% 2019)) + geom_tile(aes(x = date, y = ws, fill = img_num, text = imgcode))
p2020 <- ggplot(data = labeled_data %>% filter(year(date) %in% 2020)) + geom_tile(aes(x = date, y = ws, fill = img_num, text = imgcode))
p2021 <- ggplot(data = labeled_data %>% filter(year(date) %in% 2021)) + geom_tile(aes(x = date, y = ws, fill = img_num, text = imgcode))
plotly::ggplotly(p2019)
plotly::ggplotly(p2020)
plotly::ggplotly(p2021)
